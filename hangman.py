'''
Created on 2019/05/04

@author: seiru
'''

"""
ハングマンにようこそ！ ここではルールを説明するよ！
これは制作者が指定した特定の単語を1文字ずつ予想して当てるゲームなんだ！
1文字当てるごとに単語内の文字が明らかになっていくよ！
ただし！ 間違えると残酷なイラストが一行ずつ完成してしまうんだ！
全ての文字を当ててクリアするか、間違ってゲームオーバーになるかは君次第！
さあ、ゲームスタート！
"""

def hangman(word): #関数hangmanを作ります。 hangmanはプレイヤーに得ててほしい単語(word)を引数に持っています。
    wrong = 0 #プレイヤーが間違えた回数をカウントします。
    stages =["",
             "_______    ",
             "│         ",
             "|     |    ",
             "|     0    ",
             "|    /|/   ",
             "|    //    ",
             "|          ",
             ] #プレイヤーが間違えるごとに変数stagrsの文字列が一行ずつ出力されます。
    rletters = list(word) #wordの文字を1文字ずつ分解してリストにします。 答えなければいけない残りの文字を覚えておくのに便利です。
    board = ["_"] * len(word) #プレイヤーに見せるヒントを記録します。 まだ開かれていない部分を文字列分のアンダースコアで表示します。
    win = False #プレイヤーが勝ったかを記録します。
    print("ハングマンにようこそ！") #全ての処理が終わったときに表示されます。
    while wrong < len(stages) - 1: #変数wrongの値がlen(stages) - 1よりも小さい間ループします。 wrongにはプレイヤーが答えを間違えた回数が保存されているのでプレイヤーがハングマンの絵を完成させるほど間違えばループは終了します。 -1するのは0から数えるstagewと1から始まるwrongの値を同じにするためです。
        print("\n")
        msg = "1文字を予想してね"
        char = input(msg) #プレイヤーに衆力してもらうためにinputを使い、その解答をcharに割りあてます。
        if char in rletters: #入力された要素がrlettersにあれば正解として扱われます。
            cind = rletters.index(char) #プレイヤーが正解をした時にその正解の文字がインデックスの何番目にあるかを検索し、表示の参考にします。
            board[cind] = char #プレイヤーが正解をすると更新される答えた文字と答えていない文字を表示するために使われる要素です。
            rletters[cind] = 's' #indexを使い文字を検索した場合の問題である発見した中の最初の文字のインデックス値しか返してくれないため複数の同じ文字を検索できない現象を、見つけた正解文字をいったん$に置き換えて2文字目以降の検索を可能にさせます。
        else:
            wrong += 1 #プレイヤーが回答した文字が不正解であればwrongの値が増え、stagesの絵が1つ出力されます。
        print(" ".join(board)) #スコアボードに当たります。 現在の状況を表示します。
        e = wrong + 1 #プレイヤーが不正解を出すたびにハングマンの絵を一つずつ出力させます。 これだけでは絵のすべてが一塊に出力されてしまうので"/n".join(stages)で改行してそれぞれ別の塊に変えます。 さらに[0:e]のスライスを使い、0から開始し絵が完成するまで出力が続くようにします。
        print("\n".join(stages[0:e])) #ハングマンの絵改行し、出力を一行ずつに指定します。
        if "_" not in board: #プレイヤーが正解しきったかどうかを確認します
            print("あなたの勝ち！")
            print(" ".join(board)) #もしもプレイヤーがすべての文字を当てていたならばTrueとして処理され、Trueであればbreakで終了します。
            win = True
            break
    if not win: #もしもプレイヤーがすべての文字を当てられなかったならこちらの処理がされ、win = Falseの記述が出力されます。
            print("\n".join(stages[0:wrong+1])) #
            print("あなたの負け！ 正解は {}.".format(word)) #負けを表示し、formatメソッドでwordから参照した答えを表示します。
            
hangman("excel") #hangmanの答えの単語です。